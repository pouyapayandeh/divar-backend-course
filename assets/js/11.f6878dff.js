(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{217:function(t,e,r){"use strict";r.r(e);var a=r(0),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"مایکروسرویس-grpc-با-go"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#مایکروسرویس-grpc-با-go"}},[t._v("#")]),t._v(" مایکروسرویس gRPC با Go")]),t._v(" "),r("h3",{attrs:{id:""}},[r("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")]),t._v(" \\")]),t._v(" "),r("p",[t._v("اهداف")]),t._v(" "),r("ul",[r("li",[t._v("آشنایی با Best Practice ها و معماری‌های سرویس‌ها با زبان Go")]),t._v(" "),r("li",[t._v("آشنایی با پروتکل gRPC")]),t._v(" "),r("li",[t._v("آشنایی با فرآیند Lock در Go")]),t._v(" "),r("li",[t._v("نصب پکیج (go modules)")]),t._v(" "),r("li",[t._v("آشنایی با Best Practice نوشتن Command Line Interface")]),t._v(" "),r("li",[t._v("آشنایی با Dependency Injection")]),t._v(" "),r("li",[t._v("آشنایی با testing در Go")])]),t._v(" "),r("p",[t._v("اگه همهٔ امکانات و قابلیت‌های یک محصول تو قالب یک پروژه باشه، اون پروژه بعد از مدتی میتونه خیلی گنده و غیر قابل کنترل باشه. یه معماری که اخیرا شرکت‌های مختلفی تو جهان (از جمله خود کافه‌بازار و دیوار) دارن به سمتش میرن Microservice نام داره. با توجه به اینکه این کلمه رو احتمالا زیاد خواهی شنید، خوبه که "),r("a",{attrs:{href:"https://www.nginx.com/blog/introduction-to-microservices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("این لینک"),r("OutboundLink")],1),t._v(" رو یه مطالعه‌ای بکنی .(شاید کامل همهٔ بخش‌هاش رو متوجه نشی، ولی با سرچ کلماتی که باهاش آشنا نیستی تهش می‌تونی یه دید کلی‌ای نسبت به اینکه اصلا این معماری چی هست در بیاری)")]),t._v(" "),r("p",[t._v("پایتون زبان خیلی راحتیه و باهاش پروژه سریع جلو میره ولی وقتی پای همروندی توی مقیاس زیاد مطرح می‌شه خیلی قوی ظاهر نمی‌شه. ما توی شرکت وقتی ترافیک یک API خیلی زیاد باشه معمولا اون رو به صورت یک مایکروسرویس با زبون Go می‌نویسیم. در این مرحله می‌خواهیم یک سرویس برای یادگیری Go بنویسیم.")]),t._v(" "),r("h3",{attrs:{id:"برای-مطالعه"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#برای-مطالعه"}},[t._v("#")]),t._v(" برای مطالعه")]),t._v(" "),r("ul",[r("li",[t._v("برای آشنا شدن با ساختار های مرسوم پروژه در زبان Go بد نیست به "),r("a",{attrs:{href:"https://github.com/golang-standards/project-layout",target:"_blank",rel:"noopener noreferrer"}},[t._v("این پروژه"),r("OutboundLink")],1),t._v(" یه نگاهی بندازی.")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/cafebazaar/go-boilerplate",target:"_blank",rel:"noopener noreferrer"}},[t._v("این یکی پروژه"),r("OutboundLink")],1),t._v(" رو بچه‌های شرکت نوشتن. یه سمپل مایکروسرویس با Goعه که با نیاز های شرکت همخونی داره. بد نیست به این هم یه نگاهی بندازی.")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://git.cafebazaar.ir/bardia/go-microservice-sample",target:"_blank",rel:"noopener noreferrer"}},[t._v("این پروژه"),r("OutboundLink")],1),t._v(" هم مشابه قبلیه ولی برای "),r("strong",[t._v("دوره آموزشی")]),t._v(" ساده سازی شده. این یکی رو حتما کامل بخون. برای اینکه توی Go پروژه‌ای بنویسیم که بشه براش راحت تست نوشت لازمه که الگوی Dependency Injection رو رعایت کنیم. برای آشنا شدن با این الگو "),r("a",{attrs:{href:"https://www.martinfowler.com/articles/injection.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("این مقاله"),r("OutboundLink")],1),t._v(" رو بخونید و توی سمپلی که داده شده به جاهایی که از این الگو استفاده شده دقت کنید.")]),t._v(" "),r("li",[t._v("پروتکل gRPC یه پروتکل جدیده که گوگل نوشتش و برای ارتباط بین مایکروسرویس‌ها خیلی مناسبه. برای یادگیری این پروتکل این "),r("a",{attrs:{href:"https://grpc.io/docs/quickstart/go/",target:"_blank",rel:"noopener noreferrer"}},[t._v("لینک"),r("OutboundLink")],1),t._v(" و این "),r("a",{attrs:{href:"https://grpc.io/docs/tutorials/basic/go/",target:"_blank",rel:"noopener noreferrer"}},[t._v("لینک"),r("OutboundLink")],1),t._v(" رو بخون.")])]),t._v(" "),r("h3",{attrs:{id:"تمرین"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#تمرین"}},[t._v("#")]),t._v(" تمرین")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("فرض کن توی کافه‌‌بازار یک API داریم که با گرفتن اسم یه package name اطلاعات اون رو بر میگردونه و با Python نوشته شده. ولی این API یکم کنده و نمیتونه بار زیادی رو تحمل کنه. ما می‌خوایم یک سرویس با Go بنویسیم که نقش cache رو داشته باشه. یعنی ریکوئست کاربر به جای اینکه مستقیم API رو صدا بزنه به سرویس ما میاد. ما نگاه می‌کنیم اگه اطلاعات توی حافظه ما بود جواب رو به کاربر بر می‌گردونیم و اگه نبود اطلاعات رو از API می‌گیریم توی cache خودمون ذخیره می‌کنیم و بعد جواب رو به کاربر می‌دیم.")]),t._v(" "),r("p",[t._v("APIی که راجع بش صحبت کردیم با پرتکل gRPC نوشته شده و روی  "),r("code",[t._v("appdetail.test.roo.cloud")]),t._v(" و پورت "),r("code",[t._v("8080")]),t._v(" قابل دسترسیه. فایل protobuf ش رو از "),r("a",{attrs:{href:"https://drive.google.com/open?id=1lxXZjhooz8bAKlwXSjnAHo4KxkzNqt02",target:"_blank",rel:"noopener noreferrer"}},[t._v("این لینک"),r("OutboundLink")],1),t._v(" می‌تونی بگیری.")]),t._v(" "),r("p",[t._v("با توجه به سمپل کد داده شده یک سرویس gRPC با گو بنویس که  اینکارو انجام بده. برای نوشتن این پروژه از Go ورژن بزرگ تر از ۱.۱۱ (ترجیحا ورژن آخر) استفاده کن. برای نصب پکیج‌ها هم از go modules استفاده کن که از ورژن ۱۱ به بعد اضافه شده. برای cache کردن هم می‌تونی از  پکیج "),r("a",{attrs:{href:"https://github.com/allegro/bigcache",target:"_blank",rel:"noopener noreferrer"}},[t._v("bigcache"),r("OutboundLink")],1),t._v(" استفاده کنی.")])]),t._v(" "),r("li",[r("p",[t._v("برای پروژت یک cli بنویس که دو دستور run برای اجرای سرور و version برای چاپ کردن نام و ورژن فعلی پروژه داشته باشه. برای نوشتن cli میتونی از کتابخانه "),r("a",{attrs:{href:"https://github.com/spf13/cobra",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cobra"),r("OutboundLink")],1),t._v(" استفاده کنی.")])]),t._v(" "),r("li",[r("p",[t._v("حالا می‌خوایم یکم سرویسمون رو هوشمندترش کنیم که توی ترافیک بالا بهتر پاسخگو باشه. فرض کنیم ما اپلیکیشن A رو توی حافظه cache سرویسمون نداریم. وقتی کاربر درخواست اطلاعات اپلیکیشن A رو میده سرویسمون میره از API اطلاعات سرویس A رو بگیره ولی قبل اینکه API جواب بده ۱۰ کاربر دیگه دوباره درخواست اطلاعات اپلیکیشن A رو می‌کنن اینطوری سرویس ما چون هنوز اطلاعات این اپلیکیشن رو نداره ۱۰ بار دیگه API رو فراخوانی می‌کنه و از اونجایی که API ما خیلی کند بود این اتفاق شاید باعث بوجود اومدن مشکل بشه. با استفاده از Mutex توی Go کاری کن که اگه ۱۰ نفر با هم خواستن اطلاعات یک اپ یکسان رو از API بگیرن یکیشون اینکارو بکنه و اون ۹ تای دیگه وایسن تا جواب اولی بیاد از جواب همون اولی استفاده کنن.")])])]),t._v(" "),r("h2",{attrs:{id:"تست"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#تست"}},[t._v("#")]),t._v(" تست")]),t._v(" "),r("p",[t._v("کدی که تا الان نوشتیم پیچیدگی بیشتری نسبت به تمرین های قبل. حالا برای اینکه مطمئن بشیم کدهایی که زدیم همونطور که انتظار داریم کار می‌کنن و اگر بعدا یه جایی از کد رو تغییر دادیم بقیهٔ جاها خراب نشدن و چند دلیل ارزشمند دیگه برای کدمون تست می‌نویسیم.")]),t._v(" "),r("h3",{attrs:{id:"برای-مطالعه-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#برای-مطالعه-2"}},[t._v("#")]),t._v(" برای مطالعه")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.merixstudio.com/blog/test-automation-in-web-development/",target:"_blank",rel:"noopener noreferrer"}},[t._v("این مقاله"),r("OutboundLink")],1),t._v(" خیلی خوبیه که مزیت های تست نوشتن رو می‌گه. خوبه که بخونیش")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://codeutopia.net/blog/2015/04/11/what-are-unit-testing-integration-testing-and-functional-testing/",target:"_blank",rel:"noopener noreferrer"}},[t._v("این مقاله"),r("OutboundLink")],1),t._v(" هم انواع تست نوشتن رو توضیح میده")]),t._v(" "),r("li",[r("a",{attrs:{href:"https://devopedia.org/mock-testing",target:"_blank",rel:"noopener noreferrer"}},[t._v("این مقاله"),r("OutboundLink")],1),t._v(" هم mock کردن آبجکت ها برای تست نوشتن رو توضیح داده")])]),t._v(" "),r("h3",{attrs:{id:"تمرین-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#تمرین-2"}},[t._v("#")]),t._v(" تمرین")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("برای این مایکرو سرویسی که نوشتیم unittest بنویس. برای اینکه این تست بتونه مستقلا اجرا بشه و بتونیم همه شرایط رو تست کنیم لازمه که بخشی که به سرویس پایتونی ریکوئست میزنه Mock شده باشه. برای اینکه اینکارو بنونید انجام بدی از قبل باید این بخش رو با الگوی Dependency Injection نوشته باشی.")]),t._v(" "),r("p",[t._v("سعی کن توی تست همه حالت هایی که ممکنه اتفاق بیوفته رو پوشش بدی. اصلی ترین چیزی حتما باید با تست شبیه سازیش کنی حالتیه که یه اپلیکیشن توی cache نباشه و چندتا ریکوئست همزمان به صورت موازی برای گرفتنش درخواست بدن. توی این شرایط باید با Mock کردن کامپوننتی که ریکوئست میزنه بشماریم چند بار کال میشه")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);